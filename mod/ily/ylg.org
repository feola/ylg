* edit-look
** Syntax:

edit-look look data* => result

** Arguments and Values:

look — объект look или его идентификатор

data — данные look-а

result — возвращаемое значение

** Description:

Создает look по данным, переданным в параметрах. Этими данными будут
заменены соответствующие поля объекта look-a. Осуществляет загрузку
фотографий на выбранный бакэнд-сервер и связывание созданного look-а с
owner-ом. Возможные данные - указаны в разделе "данные" Модуль Ylg -
Как я вам. После создания look имеет состояние draft.

При успешном выполнении возвращает измененный объект look-а

При неудаче сигнализирует ошибку, например Ylg/err-param
** Examples:

(edit-look look :target "work") => #<LOOK>

* vote-look

Голосование за look (не owner-ом)

Пользователь может проголосовать: "хорошо выглядишь" /
"переоденься". Голосование анонимное в том смысле, что пользователи не
могут связать конкретный голос с конкретным человеком.

Мы хотим видеть сколько и как проголосовало мужчин, женщин и
стилистов. Это вызывает неоднозначность когда голосующий пользователь
еще не указал свой пол.

Пока look не перешел в состояние archived, голосующий пользователь
может сколько угодно раз переголосовать: отменить свой голос или
отдать его за другой вариант оценки.

Для избегания накруток мы должны давать возможность голосовать
ограниченно, например, не более определеного (зависящего от рейтинга)
кол-ва голосов в сутки. Пользователи, которые еще не заработали
репутацию на сайте (например свежезарегистрированные) не должны иметь
право голосовать вообще.

Кол-во оставшихся голосов должно отображаться в шапке залогиненного
пользователя (нужно добавить этот сценарий в модуль авторизации)
* show-voting-look-results

Просмотр результатов голосования

Когда look переходит в состояние archive все могут увидеть результат
голосования.?
* show-look-preview

Просмотр миниатюры look-а

Пользователю отображается миниатюра, созданная из фотографии look-а
* show-look

Просмотр look-а owner-ом

Отличается от просмотра look-а другим пользователем только наличием в
интерфейсе возможности удаления look-а и возможно некоторых других
функций.
Просмотр look-а другим пользователем (не owner-ом)

Пользователю отображается look и связанные с ним метаданные и
комментарии

Лучше если look-и будут анонимными на время голосования чтобы избежать
эффекта "восхваления гуру".
* publish-look
** Syntax:

publish-look look => result

** Arguments and Values:

look — look или его идентификатор

result — возвращаемое значение

** Description:

Owner переводит look в состояние published. После этого owner-у
редактировать некоторые поля объекта запрещается и look ставится на
голосование. Одновременно вызывается функция из Модуль Cron, которая
создает задание чтобы перевести look в состояние archive по истечении
определенного времени.

При успешном выполнении возвращает истину

В случае ошибки (в том числе и в параметре) — сигнализирует
ошибку. Например, при попытке опубликовать чужой look не являясь
администратором — Ylg/err-permission
** Examples:

(publish-look look) => T
* make-look
** Syntax:

make-look [data*] => result

** Arguments and Values:

data — данные

result — возвращаемое значение

** Description:

Создает look по данным, переданным в параметрах. Осуществляет загрузку
фотографий на выбранный бакэнд-сервер и связывание созданного look-а с
owner-ом. Возможные данные - указаны в разделе "данные" Модуль Ylg -
Как я вам. После создания look имеет состояние draft.

При успешном выполнении создает объект look-а и возвращает его в
result

При неудаче сигнализирует ошибку Ylg/err-param

** Examples:

(make-look :target "club" :stuff '(...)) => #<LOOK>
* edit-look
** Syntax:

edit-look look data* => result

** Arguments and Values:

look — объект look или его идентификатор

data — данные look-а

result — возвращаемое значение

** Description:

Создает look по данным, переданным в параметрах. Этими данными будут
заменены соответствующие поля объекта look-a. Осуществляет загрузку
фотографий на выбранный бакэнд-сервер и связывание созданного look-а с
owner-ом. Возможные данные - указаны в разделе "данные" Модуль Ylg -
Как я вам. После создания look имеет состояние draft.

При успешном выполнении возвращает измененный объект look-а

При неудаче сигнализирует ошибку, например Ylg/err-param

** Examples:

(edit-look look :target "work") => #<LOOK>
* delete-look
** Syntax:

delete-look look => result

** Arguments and Values:

look — look или его идентификатор

result — возвращаемое значение

** Description:

Owner удаляет свой look, при этом каскадом удаляются все связанные с
look-ом данные - например, ссылки на этот look в favorites других
пользователей и все комментарии к этому луку. Удаление невозможно
отменить, перед его выполнением необходимо запросить у пользователя
подтверждение.

Помечает look как удаленный. По соображениям производительности мы не
осуществляем немедленного удаления look-ов и связанных с ними данных,
этим занимается Модуль Cron

При успешном выполнении возвращает истину

В случае ошибки (в том числе и в параметре) — сигнализирует
ошибку. Например, при попытке удалить чужой look не являясь
администратором — Ylg/err-permission

** Examples:

(delete-look look) => T
* del-look-favorites

Удаление из favorites
* archive-look
Syntax:

archive-look look => result
Arguments and Values:

look — объект look или его идентификатор

result — возвращаемое значение
Description:

Перевод look-а в состояние archive. Эта функция вызывется из Модуль
Cron когда истечет время голосования за look.

Происходит автоматически по истечении интевала времени.

При успешном выполнении возвращает измененный объект look-а

При неудаче сигнализирует ошибку, например Ylg/err-permission
Examples:

(archive-look (get-look 1)) => #<LOOK>
* add-look-favorites

Пользователи могут добавить ссылку на look в свои favorites. Можно (и
наверное нужно) ограничить favorites каким-то разумным кол-вом look-ов.
