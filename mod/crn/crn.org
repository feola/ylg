* sch-task
  Syntax:

  sch-task #'func => result

** Args'n'values
*** args
    #'func -- ссылка на выполняемую по таймеру функцию, принимающую аргументом идентификатор сущности

*** result
    В случае успешного создания таймера возвращается его уникальное имя.
    В противном - ложь.
    В случае ошибки сигнализируется.

** Examples
    (sch-task #'(del-look 25689) => T
* mod-task
  Syntax:

  mod-task name ts #'func => result

** Desc
   Функция модифицирует существующее задание

** Args'n'values
*** args
    name   -- имя таймера
    ts     -- new timestamp (> current timestamp)
    #'func -- ссылка на выполняемую по таймеру функцию, принимающую аргументом идентификатор сущности

**** TODO
     что делать, если ts < текущего TS?
     * выполнить тут же
     * выкинуть ошибку

*** result
    В случае успешного изменения таймера возвращается истина.
    В противном - ложь.
    В случае ошибки (в т.ч. задание не найдено) сигнализируется.

** Examples
    (mod-task timer1 #'(del-look 2256) 3575625059) => T

* del-task
  Syntax:

  del-task name => result

** Desc
   Функция удаляет существующее задание

** Args'n'values
*** args
    name   -- имя таймера

*** result
    В случае успешного удаления таймера возвращается истина.
    В противном - ложь.
    В случае ошибки (в т.ч. задание не найдено) сигнализируется.

** Examples
    (del-task look2556) => T


* err-permission
** Description
   Сигнализирует об ошибке при попытке выполнить не соответствующие привилегиям действия,
   например, удалить отложенную задачу.

* err-param
** Description
   Сигнализирует об ошибке при передаче некорректных параметров.

* err-notfound
** Description
   Сигнализирует об ошибке, если таймер не найден.
