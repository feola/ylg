* sch-task
  Syntax:

  sch-task #'func delay => result

** Args'n'values
*** args
    #'func -- ссылка на выполняемую по таймеру функцию
    delay  -- время в секундах, обозначивающее задержку
*** result
    В случае успешного создания таймера возвращается созданный объект типа TIMER
    В противном - ложь.
    В случае ошибки (?) сигнализируется.

** Examples
    (sch-task #'del-look 25689) => T

* mod-task
  Syntax:

  mod-task timer-obj ts => result

** Desc
   Функция модифицирует существующее задание

** Args'n'values
*** args
    timer-obj -- соответствующий объект TIMER
    ts        -- new timestamp (> current timestamp)
**** TODO
     что делать, если ts < текущего TS?
     * выполнить тут же
     * выкинуть ошибку

*** result
    В случае успешного изменения таймера возвращается новый объект типа TIMER.
    В противном - ложь.
    В случае ошибки (в т.ч. задание не найдено) сигнализируется.

** Examples
    (mod-task timer-obj 3575625059) => T

* del-task
  Syntax:

  del-task timer-obj => result

** Desc
   Функция удаляет существующее задание

** Args'n'values
*** args
    timer-obj   -- соответствующий объект таймера

*** result
    В случае успешного удаления таймера возвращается истина.
    В противном - ложь.
    В случае ошибки (в т.ч. задание не найдено) сигнализируется.

** Examples
    (del-task timer-obj) => T

* err-permission
** Description
   Сигнализирует об ошибке при попытке выполнить не соответствующие привилегиям действия,
   например, удалить отложенную задачу.

* err-param
** Description
   Сигнализирует об ошибке при передаче некорректных параметров.

* err-notfound
** Description
   Сигнализирует об ошибке, если таймер не найден.
